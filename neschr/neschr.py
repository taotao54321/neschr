# -*- coding: utf-8 -*-


import functools

from PIL import Image


_NES_COLORS = (
    ( 0x74, 0x74, 0x74 ), ( 0x24, 0x18, 0x8C ), ( 0x00, 0x00, 0xA8 ), ( 0x44, 0x00, 0x9C ),
    ( 0x8C, 0x00, 0x74 ), ( 0xA8, 0x00, 0x10 ), ( 0xA4, 0x00, 0x00 ), ( 0x7C, 0x08, 0x00 ),
    ( 0x40, 0x2C, 0x00 ), ( 0x00, 0x44, 0x00 ), ( 0x00, 0x50, 0x00 ), ( 0x00, 0x3C, 0x14 ),
    ( 0x18, 0x3C, 0x5C ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 ),

    ( 0xBC, 0xBC, 0xBC ), ( 0x00, 0x70, 0xEC ), ( 0x20, 0x38, 0xEC ), ( 0x80, 0x00, 0xF0 ),
    ( 0xBC, 0x00, 0xBC ), ( 0xE4, 0x00, 0x58 ), ( 0xD8, 0x28, 0x00 ), ( 0xC8, 0x4C, 0x0C ),
    ( 0x88, 0x70, 0x00 ), ( 0x00, 0x94, 0x00 ), ( 0x00, 0xA8, 0x00 ), ( 0x00, 0x90, 0x38 ),
    ( 0x00, 0x80, 0x88 ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 ),

    ( 0xFC, 0xFC, 0xFC ), ( 0x3C, 0xBC, 0xFC ), ( 0x5C, 0x94, 0xFC ), ( 0xCC, 0x88, 0xFC ),
    ( 0xF4, 0x78, 0xFC ), ( 0xFC, 0x74, 0xB4 ), ( 0xFC, 0x74, 0x60 ), ( 0xFC, 0x98, 0x38 ),
    ( 0xF0, 0xBC, 0x3C ), ( 0x80, 0xD0, 0x10 ), ( 0x4C, 0xDC, 0x48 ), ( 0x58, 0xF8, 0x98 ),
    ( 0x00, 0xE8, 0xD8 ), ( 0x78, 0x78, 0x78 ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 ),

    ( 0xFC, 0xFC, 0xFC ), ( 0xA8, 0xE4, 0xFC ), ( 0xC4, 0xD4, 0xFC ), ( 0xD4, 0xC8, 0xFC ),
    ( 0xFC, 0xC4, 0xFC ), ( 0xFC, 0xC4, 0xD8 ), ( 0xFC, 0xBC, 0xB0 ), ( 0xFC, 0xD8, 0xA8 ),
    ( 0xFC, 0xE4, 0xA0 ), ( 0xE0, 0xFC, 0xA0 ), ( 0xA8, 0xF0, 0xBC ), ( 0xB0, 0xFC, 0xCC ),
    ( 0x9C, 0xFC, 0xF0 ), ( 0xC4, 0xC4, 0xC4 ), ( 0x00, 0x00, 0x00 ), ( 0x00, 0x00, 0x00 )
)


def _bit_at(byte, idx):
    return (byte >> idx) & 1

def _chunks(buf, size):
    for i in range(0, len(buf), size):
        yield buf[i:i+size]


class TileDecoder:
    def __init__(self):
        self._nes_colors = _NES_COLORS

    def read_tile(self, buf, plt, transparent=False):
        """Reads one tile, and converts it into 8x8 image.

        Args:
            buf: Tile data (16 Bytes).
            plt: Palette (4-tuple of color indices).
            transparent: Treat color 0 as transparent (default: False).

        Returns:
            8x8 RGBA image.
        """
        assert len(buf) == 16

        tile = Image.new("RGBA", (8, 8))
        trans_a = 0 if transparent else 0xFF

        for y in range(8):
            lo = buf[y]
            hi = buf[y+8]
            for x in range(8):
                idx = 7 - x
                value = _bit_at(lo,idx) | (_bit_at(hi,idx)<<1)
                r, g, b = self._nes_colors[plt[value]]
                a = trans_a if value == 0 else 0xFF
                tile.putpixel((x,y), (r, g, b, a))

        return tile

    def read_tile_table(self, buf, plt, transparent=False):
        """Reads 256 tiles, and converts them into array of 8x8 images.

        Args:
            buf: Tile table data (16 * 256 = 4096 Bytes).
            plt: Palette (4-tuple of color indices).
            transparent: Treat color 0 as transparent (default: False).

        Returns:
            256-tuple of 8x8 RGBA images.
        """
        assert len(buf) == 16 * 256

        read_one = functools.partial(self.read_tile, plt=plt, transparent=transparent)
        return tuple(map(read_one, _chunks(buf, 16)))


